service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
    IS_OFFLINE: ${env:IS_OFFLINE, ''} 

custom:
  postsTableName: posts-table--${self:provider.stage}
  serverless-dynamodb:
    stages:
      - dev
    start:
      migrate: true
  serverless-offline:
    resourceRoutes: true # HTTP proxy

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript
  - serverless-dynamodb
  - serverless-offline

functions:
  getPost:
    handler: api/get-post.lambdaHandler
    name: get-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt PostsTable.Arn
  createPost:
    handler: api/create-post.lambdaHandler
    name: create-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt PostsTable.Arn
  updatePost:
    handler: api/update-post.lambdaHandler
    name: update-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt PostsTable.Arn
  deletePost:
    handler: api/delete-post.lambdaHandler
    name: delete-post
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post/{postId}
          method: DELETE
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt PostsTable.Arn
  getAllPosts:
    handler: api/get-all-posts.lambdaHandler
    name: get-all-posts
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: posts
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
